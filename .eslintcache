[{"C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\index.js":"1","C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\App.js":"2","C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\components\\TodoForm.js":"3","C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\components\\TodoList.js":"4","C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\components\\Todo.js":"5"},{"size":200,"mtime":1610292241568,"results":"6","hashOfConfig":"7"},{"size":193,"mtime":1610297796457,"results":"8","hashOfConfig":"7"},{"size":1198,"mtime":1610309356936,"results":"9","hashOfConfig":"7"},{"size":1267,"mtime":1610306898068,"results":"10","hashOfConfig":"7"},{"size":1203,"mtime":1610307706317,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c242x",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\index.js",[],"C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\App.js",[],"C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\components\\TodoForm.js",[],"C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\components\\TodoList.js",[],"C:\\Users\\murat.ucar\\Documents\\todo-app-hooks\\src\\components\\Todo.js",["23"],"import React, { useState } from \"react\";\r\nimport todoForm from \"./TodoForm\";\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  if(edit.id){\r\n      return<TodoForm edit={edit} onSubmit={submitUpdate}></TodoForm>\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className=\"delete-icon\"\r\n        ></RiCloseCircleLine>\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className=\"edit-icon\"\r\n        ></TiEdit>\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Todo;\r\n",{"ruleId":"24","severity":1,"message":"25","line":2,"column":8,"nodeType":"26","messageId":"27","endLine":2,"endColumn":16},"no-unused-vars","'todoForm' is defined but never used.","Identifier","unusedVar"]